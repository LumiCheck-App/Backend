"""Recreating schema

Revision ID: cee8d027893c
Revises: 
Create Date: 2025-03-10 17:48:52.256041

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'cee8d027893c'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user_digital_habit',
    sa.Column('id_user', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('id_digital_habit', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['id_digital_habit'], ['digital_habit.id'], name='user_digital_habit_id_digital_habit_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['id_user'], ['user.id'], name='user_digital_habit_id_user_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id_user', 'id_digital_habit', name='user_digital_habit_pkey')
    )
    op.create_table('user',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('user_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('username', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('password', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('onboarding', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='user_pkey'),
    sa.UniqueConstraint('email', name='user_email_key'),
    sa.UniqueConstraint('username', name='user_username_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_user_id', 'user', ['id'], unique=False)
    op.create_table('question_status',
    sa.Column('id_user', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('id_question', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('answer', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['id_question'], ['question.id'], name='question_status_id_question_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['id_user'], ['user.id'], name='question_status_id_user_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id_user', 'id_question', name='question_status_pkey')
    )
    op.create_table('digital_habit',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='digital_habit_pkey')
    )
    op.create_index('ix_digital_habit_id', 'digital_habit', ['id'], unique=False)
    op.create_table('task',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('task_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('task', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='task_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_task_id', 'task', ['id'], unique=False)
    op.create_table('achievement',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('achievement_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('tag', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('image', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='achievement_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_achievement_id', 'achievement', ['id'], unique=False)
    op.create_table('task_status',
    sa.Column('id_user', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('id_task', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('done', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['id_task'], ['task.id'], name='task_status_id_task_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['id_user'], ['user.id'], name='task_status_id_user_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id_user', 'id_task', name='task_status_pkey')
    )
    op.create_table('question',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('question', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='question_pkey')
    )
    op.create_index('ix_question_id', 'question', ['id'], unique=False)
    op.create_table('achievement_status',
    sa.Column('id_user', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('id_achievement', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('done', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['id_achievement'], ['achievement.id'], name='achievement_status_id_achievement_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['id_user'], ['user.id'], name='achievement_status_id_user_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id_user', 'id_achievement', name='achievement_status_pkey')
    )
    op.create_table('screentime',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('id_user', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('usage_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['id_user'], ['user.id'], name='screentime_id_user_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='screentime_pkey')
    )
    # ### end Alembic commands ###
